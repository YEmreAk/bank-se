{"version":3,"sources":["components/PaymentInputs.jsx","App.js","serviceWorker.js","index.js"],"names":["PaymentInputs","usePaymentInputs","wrapperProps","getCardImageProps","getCardNumberProps","getExpiryDateProps","getCVCProps","images","App","props","onSubmitClicked","setState","text","onReCaptchaChanged","button","kind","onClick","type","state","disabled","TEST_SITE_KEY","className","href","src","theme","sitekey","this","onChange","style","padding","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSAIe,SAASA,IAAiB,IAAD,EAOlCC,cALFC,EAFoC,EAEpCA,aACAC,EAHoC,EAGpCA,kBACAC,EAJoC,EAIpCA,mBACAC,EALoC,EAKpCA,mBACAC,EANoC,EAMpCA,YAGF,OACE,kBAAC,IAAyBJ,EACxB,wBAASC,EAAkB,CAAEI,cAC7B,0BAAWH,KACX,0BAAWC,KACX,0BAAWC,M,ICwDFE,E,kDAnEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,gBAAkB,WAChB,EAAKC,SAAS,CACZC,KAAM,0JAZS,EAenBC,mBAAqB,WACnB,EAAKF,SAAS,CAAEG,OAAQ,4BAAQC,KAAK,UAAUC,QAAS,EAAKN,gBAAiBO,KAAK,UAA3D,aAbxB,EAAKC,MAAQ,CACXJ,OAAQ,4BAAQC,KAAK,UAAUE,KAAK,SAASE,UAAQ,GAA7C,UACRC,cAAe,2CACfR,KAAM,IANS,E,qDAoBjB,OACE,yBAAKS,UAAU,OACb,4BAAQA,UAAU,cAChB,6EACA,uBAAGC,KAAK,iBAAgB,yBAAKC,IAAI,mBAFnC,yKAGsG,oEACpG,yBAAKF,UAAU,SACb,uBAAGC,KAAK,oCAAmC,yBAAKC,IAAI,gBACpD,uBAAGD,KAAK,qCAAoC,yBAAKC,IAAI,iBACrD,uBAAGD,KAAK,iCAAgC,yBAAKC,IAAI,0BAEnD,yBAAKF,UAAU,QAAf,8BAEE,uBAAGC,KAAK,sIAAR,mBAFF,IAIE,uBAAGA,KAAK,sKAAR,YAJF,IAME,uBAAGA,KAAK,iJAAR,aAGJ,yBAAKD,UAAU,aACb,kJACA,4BACE,4BAAI,gEAAJ,yBACA,4BAAI,8CAAJ,gFACA,4BAAI,8CAAJ,6FACA,wBAAIA,UAAU,SAAQ,8CAAtB,yGAEF,yBAAKA,UAAU,gBACb,kBAACrB,EAAD,MACA,kBAAC,IAAD,CACEwB,MAAM,OACNC,QAASC,KAAKR,MAAME,cACpBO,SAAUD,KAAKb,mBACfe,MAAO,CAAEC,QAAS,UAEnBH,KAAKR,MAAMJ,QAEd,6BACCY,KAAKR,MAAMN,MAEd,4BAAQS,UAAU,UAAS,uBAAGC,KAAK,uDAAR,2E,GA/DjBQ,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c27ea1f8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { PaymentInputsWrapper, usePaymentInputs } from 'react-payment-inputs';\r\nimport images from 'react-payment-inputs/images';\r\n\r\nexport default function PaymentInputs() {\r\n  const {\r\n    wrapperProps,\r\n    getCardImageProps,\r\n    getCardNumberProps,\r\n    getExpiryDateProps,\r\n    getCVCProps\r\n  } = usePaymentInputs();\r\n\r\n  return (\r\n    <PaymentInputsWrapper {...wrapperProps}>\r\n      <svg {...getCardImageProps({ images })} />\r\n      <input {...getCardNumberProps()} />\r\n      <input {...getExpiryDateProps()} />\r\n      <input {...getCVCProps()} />\r\n    </PaymentInputsWrapper>\r\n  );\r\n}","import React, { Component } from 'react';\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport './App.css';\nimport PaymentInputs from './components/PaymentInputs';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      button: <button kind=\"default\" type=\"submit\" disabled>Submit</button>,\n      TEST_SITE_KEY: \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\",\n      text: \"\"\n    }\n  }\n\n  onSubmitClicked = () => {\n    this.setState({\n      text: \"üìß SMS bilgisi Asmaa Mirkhan ü¶ã g√ºvencesiyle \\n g√∂nderildi (üëÆ‚Äç‚ôÇÔ∏è Kimseyle payla≈ümayƒ±n)\"})\n  }\n\n  onReCaptchaChanged = () => {\n    this.setState({ button: <button kind=\"default\" onClick={this.onSubmitClicked} type=\"submit\">Submit</button> })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Bankalarda EFT √ºcreti yeniden d√ºzenlendi</p>\n          <a href=\"eft_table.jpg\"><img src=\"eft_table.jpg\" /></a>\n          Son yaptƒ±ƒüƒ±nƒ±z i≈ülemlerde fazla EFT √ºcreti alƒ±ndƒ±ysa bankanƒ±z ile anla≈ümalƒ± √ßalƒ±≈üan hizmetimiz ile  <b>paranƒ±zƒ± geri alabilirsiniz</b>\n          <div className=\"Banks\">\n            <a href=\"https://www.ziraatbank.com.tr/tr\"><img src=\"ziraat.png\"></img></a>\n            <a href=\"https://www.garantibbva.com.tr/tr\"><img src=\"garanti.png\"></img></a>\n            <a href=\"https://www.yapikredi.com.tr/\"><img src=\"yapƒ±-kredi.png\"></img></a>\n          </div>\n          <div className=\"Refs\">\n            Detaylƒ± bilgi i√ßin:\n            <a href=\"https://www.haberturk.com/son-dakika-bankacilik-islemlerinde-yeni-donem-eft-ve-havale-ucretleri-dusuruldu-haberler-2599867-ekonomi\"> Haber T√ºrk </a>\n            -\n            <a href=\"https://www.takvim.com.tr/ekonomi/2020/03/19/bankalardan-koronavirus-duzenlemesi-limit-5-bin-tlye-cikti-tum-ucretler-kaldirildi-iste-banka-banka-yeni-duzenlemeler\"> Takvim </a>\n            -\n            <a href=\"https://www.sabah.com.tr/galeri/ekonomi/milyonlara-nefes-aldiran-karar-o-ucretler-kaldirildi-eft-havale-hesap-isletim-ucretleri-ne-kadar-oldu\"> Sabah </a>\n          </div>\n        </header>\n        <div className=\"CardPanel\">\n          <p>Kredi kartƒ± bilgileriniz ile EFT geri √∂deme i≈ülemini sizler i√ßin 2dk i√ßerisinde yapmaktayƒ±z</p>\n          <ul>\n            <li><span>üíÅ‚Äç‚ôÇÔ∏è</span> Her banka ile uyumlu</li>\n            <li><span>üïê</span> Banka ile aracƒ± i≈ülemleri sizi uƒüra≈ütƒ±rmadan yapan</li>\n            <li><span>üîí</span> SHA256, Base64 ≈üifreleme algoritmalarƒ± ve SMS onaylamasƒ± ise g√ºvenilir</li>\n            <li className=\"quote\"><span>‚ö†Ô∏è</span> Bankanƒ±zdan aldƒ±ƒüƒ±nƒ±z SMS bilgisini kimse ile payla≈ümayƒ±nƒ±z</li>\n          </ul>\n          <div className=\"PaymentPanel\">\n            <PaymentInputs />\n            <ReCAPTCHA\n              theme=\"dark\"\n              sitekey={this.state.TEST_SITE_KEY}\n              onChange={this.onReCaptchaChanged}\n              style={{ padding: \"30px\" }}\n            />\n            {this.state.button}\n          </div>\n          <br></br>\n          {this.state.text}\n        </div>\n        <footer className=\"Footer\"><a href=\"https://en.wikipedia.org/wiki/Certificate_authority\">üîí Secure Certificate 2020 ~ Asmaa Mirkhan ü¶ã</a></footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}